// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  username      String?       @unique
  email         String        @unique
  name          String
  password      String
  avatar        String?
  phone         String        @unique
  status        Status        @default(PENDING)
  role          Role          @default(USER)
  emailVerified Boolean       @default(false)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime?
  Session       Session[]
  ChatUser      ChatUser[]
  Message       Message[]
  MessageRead   MessageRead[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ip        String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String     @id @default(uuid())
  name      String?
  isGroup   Boolean    @default(false)
  users     ChatUser[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ChatUser {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  joinedAt DateTime @default(now())

  @@unique([userId, chatId])
}

model Message {
  id        String        @id @default(uuid())
  content   String
  sender    User          @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat          @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  readBy    MessageRead[]
}

model MessageRead {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  readAt    DateTime @default(now())

  @@unique([userId, messageId])
}

enum Status {
  ACTIVE
  PENDING
}

enum Role {
  ADMIN
  USER
}
